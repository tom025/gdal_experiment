plugins {
  id 'base'
}

configurations {
  setup
  install
}

dependencies {
  setup(
      group: 'pypi',
      name: 'setuptools',
      version: '>=38.4.0'
  )
  setup(
      group: 'pypi',
      name: 'flake8',
      version: '>=3.5.0'
  )
  install(
      group: 'pypi',
      name: 'GDAL',
      version: "==2.2.3"
  )
}

task installSystemRequirements(
    type: Exec,
    group: 'System Requirements',
    description: 'install sytem requirements (c projects/bindings like gdal 2)'
) {
  executable = 'scripts/install_system_requirements'
}

task venv(
    type: Exec,
    group: 'Python',
    description: 'Create python3.6 virtual environment',
    dependsOn: installSystemRequirements
) {
  final venvDir = "$buildDir/venv"

  outputs.dir(venvDir)

  commandLine = [
      '/usr/local/bin/python3', '-m', 'venv', venvDir
  ]
}

final setup_requirements = file('requirements/setup.txt')
final install_requirements = file('requirements/install.txt')

task writeSetupRequirements(
    type: RequirementsFile,
    description: 'write python setup requirements to file',
    dependsOn: venv
) {
  requirements = configurations.setup.dependencies
  requirementsFile = setup_requirements
}

task installSetupRequirements(
    type: Exec,
    group: 'Python',
    description: 'install project setup requirements from file',
    dependsOn: [
        writeSetupRequirements
    ]
) {
  final pip = "$buildDir/venv/bin/pip"
  final site_packages = fileTree("$buildDir/venv/lib/python3.6/site-packages")

  final requirements = configurations.setup.dependencies

  inputs.file(setup_requirements)

  requirements.each { req ->
    outputs.files(
        site_packages.include(
            "${req.name}/**/*",
            "${req.name}-*.dist-info/**/*"
        )
    )
  }
  logging.captureStandardOutput LogLevel.INFO

  commandLine = [
      pip, 'install', '--requirement', setup_requirements.path
  ]
}

task writeInstallRequirements(
    type: RequirementsFile,
    description: 'write project install requirements to file',
    dependsOn: venv
) {
  requirements = configurations.install.dependencies
  requirementsFile = install_requirements
}

task installInstallRequirements(
    type: Exec,
    group: 'Python',
    description: 'install project install requirements from file',
    dependsOn: [
        writeInstallRequirements
    ]
) {
  final pip = "$buildDir/venv/bin/pip"
  final site_packages = fileTree("$buildDir/venv/lib/python3.6/site-packages")

  final requirements = configurations.install.dependencies

  inputs.file(install_requirements)

  requirements.each { req ->
    outputs.files(
        site_packages.include(
            "${req.name}/**/*",
            "${req.name}-*.dist-info/**/*"
        )
    )
  }
  logging.captureStandardOutput LogLevel.INFO

  final PATH = environment.PATH
  environment(
      'PATH',
      [
          '/usr/local/opt/gdal2-python/bin',
          '/usr/local/opt/gdal2/bin',
          PATH
      ].join(":")
  )

  commandLine = [
      pip, 'install', '--requirement', install_requirements.path
  ]
}

assemble {
  dependsOn(
      installSetupRequirements,
      installInstallRequirements
  )
}

class RequirementsFile extends DefaultTask {
  String group = 'Python'

  DependencySet requirements

  @OutputFile
  File requirementsFile

  @TaskAction
  void writeRequirements() {
    requirementsFile.withWriter { out ->
      requirements.forEach { req ->
        out.println("${req.name}${req.version}")
      }
    }
  }
}
