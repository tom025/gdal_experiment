import static org.gradle.api.logging.LogLevel.*
import static org.gradle.api.logging.LogLevel.INFO

plugins {
  id 'base'
}

configurations {
  setup
  install
}

dependencies {
  setup(
      group: 'pypi',
      name: 'setuptools',
      version: '>=38.4.0'
  )
  setup(
      group: 'pypi',
      name: 'flake8',
      version: '>=3.5.0'
  )
  install(
      group: 'pypi',
      name: 'GDAL',
      version: "==2.2.3"
  )
}

task installSystemRequirements(
    type: Exec,
    group: 'System Requirements',
    description: 'install sytem requirements (c projects/bindings like gdal 2)'
) {
  executable = 'scripts/install_system_requirements'
  outputs.dirs(
      '/usr/local/opt/gdal2',
      '/usr/local/opt/gdal2-python'
  )
}

task venv(
    type: Exec,
    group: 'Python',
    description: 'Create python3.6 virtual environment',
    dependsOn: installSystemRequirements
) {
  final venvDir = "$buildDir/venv"

  outputs.dir(venvDir)

  commandLine = [
      '/usr/local/bin/python3', '-m', 'venv', venvDir
  ]
}

final setup_requirements = file('requirements/setup.txt')
final install_requirements = file('requirements/install.txt')

task writeSetupRequirements(
    type: RequirementsFile,
    description: 'write python setup requirements to file',
    dependsOn: venv
) {
  requirements = configurations.setup.dependencies
  requirementsFile = setup_requirements
}

task installSetupRequirements(
    type: InstallRequirements,
    group: 'Python',
    description: 'install project setup requirements from file',
    dependsOn: [
        writeSetupRequirements
    ]
) {
  requirementsFile = setup_requirements
}

task writeInstallRequirements(
    type: RequirementsFile,
    description: 'write project install requirements to file',
    dependsOn: venv
) {
  requirements = configurations.install.dependencies
  requirementsFile = install_requirements
}

task installInstallRequirements(
    type: InstallRequirements,
    description: 'install project install requirements from file',
    dependsOn: [
        writeInstallRequirements
    ]
) {
  requirementsFile = install_requirements
  pathAdditions = [
      '/usr/local/opt/gdal2-python/bin',
      '/usr/local/opt/gdal2/bin',
  ]
}

assemble {
  dependsOn(
      installSetupRequirements,
      installInstallRequirements
  )
}

class RequirementsFile extends DefaultTask {
  String group = 'Python'

  DependencySet requirements

  @OutputFile
  File requirementsFile

  @TaskAction
  void writeRequirements() {
    requirementsFile.withWriter { out ->
      requirements.forEach { req ->
        out.println("${req.name}${req.version}")
      }
    }
  }
}

class InstallRequirements extends DefaultTask {
  String group = 'Python'

  private String buildDir = project.buildDir
  String pip = "$buildDir/venv/bin/pip"

  InstallRequirements() {
    logging.captureStandardOutput(INFO)
    logging.captureStandardError(ERROR)
  }

  List<String> pathAdditions = []

  @InputFile
  File requirementsFile

  @OutputFiles
  FileCollection sitePackages = project.fileTree("$buildDir/venv/lib/python3.6/site-packages")

  @TaskAction
  void installRequirements() {
    project.exec {
      commandLine = [
          pip, 'install', '--requirement', requirementsFile.path
      ]
      final String PATH = environment.PATH
      environment('PATH', pathAdditions.plus(PATH).join(':'))
    }
  }
}
